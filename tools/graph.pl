#!/usr/bin/perl -w

use ModernStyle;


use Data::Dumper;


$|++;    # print to stdout before newline
##########################################
# main

 use App::PrereqGrapher;
  
  my %options = (
                          format => 'dot',
                         no_core => 1,
                 no_recurse_core => 1,
                     output_file => $ARGV[0],
                         verbose => 0,
                );
  my $grapher = App::PrereqGrapher->new( %options );
  
  $grapher->generate_graph($ARGV[1]);

__END__

# usage:

../tools/graph.pl ../core.dot Core::Core
../tools/graph.pl ../build.dot Plugins::Build::Build
../tools/graph.pl ../container.dot Plugins::Container::Container
../tools/graph.pl ../docker.dot Plugins::Docker::Docker
../tools/graph.pl ../hostos.dot Plugins::HostOS::HostOS
../tools/graph.pl ../mro.dot Plugins::MRO::MRO

########

#sed -i 's/.*Hash::Merge.*//' *.dot
sed -i 's/.*Data::Dumper.*//' *.dot
sed -i 's/.*ModernStyle.*//' *.dot
sed -i 's/.*perl.*//' *.dot
sed -i 's/.*PSI::Console.*//' *.dot
sed -i 's/.*Template\ .*//' *.dot
sed -i 's/.*Template::.*//' *.dot
sed -i 's/.*File::Copy.*//' *.dot
sed -i 's/.*IO::Prompter.*//' *.dot
sed -i 's/.*Contextual.*//' *.dot
sed -i 's/.*PSI::RunCmds.*//' *.dot
sed -i 's/.*Tree::.*//' *.dot
######### create combined set

cat *.dot | grep \ color >> all.adot

cat > all.dot << "EOF"
digraph GRAPH_0 {

  // Generated by Graph::Easy 0.75 at Wed Apr 15 15:24:15 2015

  edge [ arrowhead=open ];
  graph [ rankdir=LR ];
  node [
    fillcolor=white,
    fontsize=11,
    shape=box,
    style=filled ];
EOF

#all="";
#for i in $(find Core/Commands/ Core/CmdMod/Config/ | sed -e 's/\//::/g' | sed -e 's/\.pm//' | grep -v '::$'); do
#        name=$(echo $i | sed -e 's/.*:://')
#        all="$all \"$i\""
#        ./graph.pl cmd_$name.dot $i
#
#        echo \"$i\" [fillcolor=grey]\; >> cmds.dot
#done
# { rank=same;  $all }

# filter double lines
cat all.adot | sort -d | uniq | sort | grep :: | grep -v rank | grep -v fillcolor >> all.dot
echo "}" >> all.dot

